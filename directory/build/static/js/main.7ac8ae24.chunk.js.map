{"version":3,"sources":["components/Table/index.jsx","pages/Main/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["Table","props","employees","config","React","useState","sortData","setSortData","useMemo","sortEmps","sort","a","b","key","direction","requestSort","useSortableData","allemployees","getClassNamesFor","name","undefined","searchTerm","setSearchTerm","type","placeholder","value","onChange","event","target","className","id","onClick","filter","person","toLowerCase","includes","toLocaleLowerCase","map","newperson","src","picture","alt","email","phone","App","EmployeeList","ReactDOM","render","document","getElementById","path","component","Home","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"ouGAoHeA,EAhFD,SAACC,GAAW,IAAD,EAlCD,SAACC,GAA8B,IAAnBC,EAAkB,uDAAT,KAAS,EACpBC,IAAMC,SAASF,GADK,mBAC7CG,EAD6C,KACnCC,EADmC,KA+BpD,MAAO,CAAEL,UA5BQE,IAAMI,SAAQ,WAC7B,IAAIC,EAAQ,YAAOP,GAYnB,OAXiB,OAAbI,GACFG,EAASC,MAAK,SAACC,EAAGC,GAChB,OAAID,EAAEL,EAASO,KAAOD,EAAEN,EAASO,KACD,cAAvBP,EAASQ,WAA6B,EAAI,EAE/CH,EAAEL,EAASO,KAAOD,EAAEN,EAASO,KACD,cAAvBP,EAASQ,UAA4B,GAAK,EAE5C,KAGJL,IACN,CAACP,EAAWI,IAceS,YAZV,SAACF,GACnB,IAAIC,EAAY,YAEdR,GACAA,EAASO,MAAQA,GACM,cAAvBP,EAASQ,YAETA,EAAY,cAEdP,EAAY,CAAEM,MAAKC,eAGsBR,YAIEU,CAAgBf,EAAMgB,cAA3Df,EADe,EACfA,UAAWa,EADI,EACJA,YAAaT,EADT,EACSA,SAC1BY,EAAmB,SAACC,GACxB,GAAKb,EAGL,OAAOA,EAASO,MAAQM,EAAOb,EAASQ,eAAYM,GAN/B,EASahB,IAAMC,SAAS,IAT5B,mBAShBgB,EATgB,KASJC,EATI,KAcrB,OAEI,gCACE,8BACE,uBACEC,KAAK,OACLC,YAAY,iBACZC,MAAOJ,EACPK,SAZS,SAAAC,GACnBL,EAAcK,EAAMC,OAAOH,YAerB,wBAAOI,UAAU,2BAAjB,UAEE,gCACE,+BACE,iDACA,6BACE,wBACEC,GAAG,WACHP,KAAK,SACLQ,QAAS,kBAAMhB,EAAY,UAC3Bc,UAAWX,EAAiB,SAJ9B,oBASF,6BACE,wBACEY,GAAG,WACHP,KAAK,SACLQ,QAAS,kBAAMhB,EAAY,UAC3Bc,UAAWX,EAAiB,SAJ9B,qBASF,6BACE,wBACEY,GAAG,WACHP,KAAK,SACLQ,QAAS,kBAAMhB,EAAY,UAC3Bc,UAAWX,EAAiB,SAJ9B,0BAWN,gCAEGhB,EAAU8B,QAAQ,SAAAC,GAAM,OAAIA,EAAOd,KAAKe,cAAcC,SAASd,EAAWe,wBAAuBC,KAAI,SAAAC,GAAS,OAC7G,+BACE,6BAAI,qBAAKC,IAAKD,EAAUE,QAASX,UAAU,eAAeY,IAAI,UAC9D,6BAAKH,EAAUnB,OACf,6BAAKmB,EAAUI,QACf,6BAAKJ,EAAUK,UAJRL,EAAUR,gBC/FpB,SAASc,IACtB,OACE,qBAAKf,UAAU,MAAf,SAEE,cAAC,EAAD,CAAeZ,aAAc4B,MAMnCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SCGlCL,MAff,WACE,OACE,gCACE,wBAAQf,UAAU,aAAlB,SACE,0DAEF,+BACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOqB,KAAK,IAAIC,UAAWC,YCDtBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdR,IAASC,OACP,cAAC,IAAMe,WAAP,UACE,cAAC,EAAD,MAEFd,SAASC,eAAe,SAM1BI,M","file":"static/js/main.7ac8ae24.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst useSortableData = (employees, config = null) => {\r\n  const [sortData, setSortData] = React.useState(config);\r\n\r\n  const sortEmps = React.useMemo(() => {\r\n    let sortEmps = [...employees];\r\n    if (sortData !== null) {\r\n      sortEmps.sort((a, b) => {\r\n        if (a[sortData.key] < b[sortData.key]) {\r\n          return sortData.direction === 'ascending' ? -1 : 1;\r\n        }\r\n        if (a[sortData.key] > b[sortData.key]) {\r\n          return sortData.direction === 'ascending' ? 1 : -1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n    return sortEmps;\r\n  }, [employees, sortData]);\r\n\r\n  const requestSort = (key) => {\r\n    let direction = 'ascending';\r\n    if (\r\n      sortData &&\r\n      sortData.key === key &&\r\n      sortData.direction === 'ascending'\r\n    ) {\r\n      direction = 'descending';\r\n    }\r\n    setSortData({ key, direction });\r\n  };\r\n\r\n  return { employees: sortEmps, requestSort, sortData };\r\n};\r\n\r\nconst Table = (props) => {\r\n  const { employees, requestSort, sortData } = useSortableData(props.allemployees);\r\n  const getClassNamesFor = (name) => {\r\n    if (!sortData) {\r\n      return;\r\n    }\r\n    return sortData.key === name ? sortData.direction : undefined;\r\n  };\r\n\r\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n  const handleChange = event => {\r\n    setSearchTerm(event.target.value);\r\n  };  \r\n  \r\n    return (\r\n\r\n        <div>\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search By Name\"\r\n              value={searchTerm}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n\r\n          <table className=\"striped responsive-table\">\r\n\r\n            <thead>\r\n              <tr>\r\n                <th>Profile Picture</th>\r\n                <th>\r\n                  <button\r\n                    id=\"myButton\"\r\n                    type=\"button\"\r\n                    onClick={() => requestSort('first')}\r\n                    className={getClassNamesFor('first')}\r\n                  >\r\n                    Name\r\n          </button>\r\n                </th>\r\n                <th>\r\n                  <button\r\n                    id=\"myButton\"\r\n                    type=\"button\"\r\n                    onClick={() => requestSort('email')}\r\n                    className={getClassNamesFor('email')}\r\n                  >\r\n                    Email\r\n          </button>\r\n                </th>\r\n                <th>\r\n                  <button\r\n                    id=\"myButton\"\r\n                    type=\"button\"\r\n                    onClick={() => requestSort('phone')}\r\n                    className={getClassNamesFor('phone')}\r\n                  >\r\n                    Phone\r\n          </button>\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n\r\n              {employees.filter((person => person.name.toLowerCase().includes(searchTerm.toLocaleLowerCase()))).map(newperson =>(\r\n                <tr key={newperson.id}>\r\n                  <td><img src={newperson.picture} className=\"card-img-top\" alt=\"...\" /></td>\r\n                  <td>{newperson.name}</td>\r\n                  <td>{newperson.email}</td>\r\n                  <td>{newperson.phone}</td>\r\n                </tr>\r\n              ))} \r\n\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )\r\n};\r\n\r\nexport default Table;","import React from 'react';\r\nimport EmployeeList from \"../../seed/theEmployees.json\"\r\nimport EmployeeTable from \"../../components/Table\"\r\nimport ReactDOM from \"react-dom\";\r\n\r\n\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <EmployeeTable allemployees={EmployeeList} />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Home from \"./pages/Main\";\n\nfunction App() {\n  return (\n    <div>\n      <header className=\"App-header\">\n        <h1>Directory of Employees</h1>\n      </header>\n      <body>\n        <Router>\n          <Route path=\"/\" component={Home} />\n        </Router>\n      </body>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}